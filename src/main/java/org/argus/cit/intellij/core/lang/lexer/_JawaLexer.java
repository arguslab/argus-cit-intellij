/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package org.argus.cit.intellij.core.lang.lexer;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static org.argus.cit.intellij.core.lang.psi.JawaTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_JawaLexer.flex</tt>
 */
public class _JawaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 16672 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\21\1\22\3\21\1\23\1\24\1\25\1\21\14\26\1\27\50\26\1\30\2\26\1\31\1\32"+
    "\1\33\1\34\25\26\1\35\20\21\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1"+
    "\47\1\50\1\21\1\51\1\52\1\53\1\54\1\55\1\56\2\21\1\26\1\57\1\60\5\21\2\26"+
    "\1\61\7\21\1\26\1\62\20\21\1\26\1\63\1\21\1\64\40\21\1\65\5\21\1\66\11\21"+
    "\1\67\1\70\1\71\1\72\1\21\1\73\6\21\1\74\2\21\1\75\1\76\7\21\123\26\1\77\7"+
    "\26\1\100\1\101\12\26\1\102\24\21\1\26\1\103\u0582\21\1\104\u017f\21");

  /* The ZZ_CMAP_Y table has 4416 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\11\1\12\1\13\1\14\1\15\4\0\1\16"+
    "\1\17\1\16\2\7\1\20\3\7\1\20\71\7\1\21\1\7\1\22\1\0\1\23\1\24\2\0\16\25\1"+
    "\26\1\27\1\30\1\31\2\7\1\32\11\7\1\33\21\7\1\34\1\35\24\7\1\36\3\7\1\20\1"+
    "\37\1\36\4\7\1\0\1\40\4\25\1\41\1\42\1\0\3\7\2\43\3\0\1\25\1\44\5\7\1\45\3"+
    "\25\1\46\1\47\13\7\1\50\1\51\1\52\1\53\1\25\1\54\2\0\1\55\3\7\3\25\1\56\12"+
    "\7\1\57\1\25\1\60\1\0\1\25\1\35\3\7\1\45\1\61\1\16\2\7\1\57\1\62\1\63\1\64"+
    "\2\0\3\7\1\65\10\0\2\7\1\23\5\0\1\66\3\25\1\67\6\7\1\70\2\25\1\71\1\7\1\72"+
    "\1\25\1\36\1\7\1\73\1\74\1\75\2\7\1\76\1\77\1\100\1\51\1\101\1\102\1\103\1"+
    "\72\1\25\1\22\1\0\1\104\1\105\1\75\2\7\1\76\1\106\1\107\1\110\1\111\1\112"+
    "\1\113\1\114\1\25\1\115\1\0\1\104\1\33\1\32\2\7\1\76\1\116\1\100\1\41\1\117"+
    "\1\120\1\0\1\72\1\25\1\0\1\37\1\104\1\74\1\75\2\7\1\76\1\116\1\100\1\51\1"+
    "\111\1\114\1\103\1\72\1\25\1\37\1\0\1\121\1\122\1\123\1\124\1\125\1\122\1"+
    "\7\1\126\1\127\1\130\1\131\1\0\1\114\1\25\2\0\1\132\1\26\1\76\2\7\1\76\1\7"+
    "\1\133\1\134\1\130\1\135\1\43\1\72\1\25\2\0\1\104\1\26\1\76\2\7\1\76\1\136"+
    "\1\100\1\134\1\130\1\135\1\30\1\72\1\25\1\137\1\0\1\104\1\26\1\76\4\7\1\140"+
    "\1\134\1\141\1\102\1\142\1\72\1\25\1\0\1\143\1\144\1\7\1\20\1\143\2\7\1\32"+
    "\1\145\1\20\1\146\1\147\1\25\1\114\1\25\1\150\1\0\1\36\5\7\1\151\1\44\1\152"+
    "\1\153\1\25\1\154\4\0\1\155\1\156\1\157\1\36\1\160\1\161\1\151\1\162\1\163"+
    "\1\164\1\25\1\165\4\0\1\120\2\0\1\154\1\25\1\154\1\166\1\167\1\7\1\36\3\7"+
    "\1\23\1\40\1\25\1\134\1\170\1\25\1\40\3\25\1\171\1\172\7\0\5\7\1\45\1\25\1"+
    "\173\1\25\1\154\1\57\1\174\1\175\1\176\1\177\1\7\1\200\1\201\1\25\1\164\4"+
    "\7\1\33\1\17\5\7\1\202\51\7\1\123\1\20\1\123\5\7\1\123\4\7\1\123\1\20\1\123"+
    "\1\7\1\20\7\7\1\123\10\7\1\203\4\0\2\7\2\0\12\7\2\204\1\36\114\7\1\74\2\7"+
    "\1\36\2\7\1\43\11\7\1\205\1\47\1\120\1\7\1\26\1\206\1\0\2\7\1\206\1\0\2\7"+
    "\1\207\1\0\1\7\1\26\1\210\1\0\6\7\1\211\3\25\1\212\1\213\1\25\1\154\3\0\1"+
    "\214\1\25\1\154\13\7\1\0\5\7\1\215\10\7\1\204\1\0\3\7\1\20\1\25\1\216\1\25"+
    "\1\216\1\114\1\25\3\7\1\204\1\23\1\0\5\7\1\217\3\7\1\22\1\25\1\154\4\0\2\7"+
    "\1\152\1\216\6\7\1\170\1\153\3\25\1\51\1\25\1\154\1\25\1\154\1\142\1\0\1\25"+
    "\1\153\10\0\1\220\5\7\1\211\1\25\1\220\1\217\1\25\1\154\1\0\1\66\1\216\1\0"+
    "\1\221\3\7\1\71\1\176\1\25\1\35\4\7\1\57\1\25\1\216\1\0\4\7\1\211\2\25\1\0"+
    "\1\25\1\222\1\25\1\35\3\7\1\204\12\0\1\223\2\25\1\224\1\225\1\154\30\7\6\25"+
    "\1\164\1\226\42\7\2\204\4\7\2\204\1\7\1\227\3\7\1\204\6\7\1\26\1\163\1\230"+
    "\1\23\1\231\1\217\1\7\1\23\1\230\1\23\5\0\1\232\1\0\1\102\1\233\1\0\1\234"+
    "\3\0\1\37\1\142\2\0\1\7\1\23\6\0\4\25\1\233\1\0\1\235\1\143\1\145\1\236\1"+
    "\24\1\237\1\7\1\240\1\241\1\242\2\0\4\25\1\243\1\233\144\0\1\114\6\25\1\154"+
    "\42\0\5\7\1\20\5\7\1\20\20\7\1\23\1\244\1\245\1\0\4\7\1\33\1\17\7\7\1\142"+
    "\1\0\1\102\2\7\1\20\1\0\10\20\4\25\5\0\1\142\72\0\1\246\3\0\1\40\1\25\1\236"+
    "\1\247\1\36\11\7\1\20\1\250\1\36\12\7\1\202\1\241\4\7\1\204\1\36\12\7\1\20"+
    "\2\0\3\7\1\43\6\0\170\7\1\204\11\0\72\7\1\204\5\0\21\7\1\23\10\0\5\7\1\204"+
    "\41\7\1\23\2\7\1\25\1\245\2\0\5\7\1\152\1\223\1\251\3\7\1\57\10\7\1\57\1\25"+
    "\1\154\3\0\1\142\1\7\1\143\14\7\1\75\3\7\1\204\1\7\7\0\1\142\1\7\1\252\1\253"+
    "\2\7\1\45\3\0\6\7\1\217\1\0\1\35\5\7\1\211\1\25\1\171\1\0\1\25\1\154\2\25"+
    "\1\35\1\254\1\25\1\35\2\7\1\57\1\164\2\7\1\152\1\25\1\216\1\0\3\7\1\23\1\67"+
    "\5\7\1\45\1\25\1\233\1\142\1\25\1\154\1\255\1\7\1\25\1\256\5\7\1\71\1\153"+
    "\1\0\1\253\1\257\1\25\1\154\2\7\1\20\1\260\6\7\1\175\1\261\1\215\2\0\1\262"+
    "\1\7\1\45\1\263\1\0\3\264\1\0\2\20\5\7\1\202\1\204\1\0\16\7\1\45\1\265\1\25"+
    "\1\154\64\7\1\217\1\0\2\7\1\20\1\266\5\7\1\217\40\0\55\7\1\204\15\7\1\22\4"+
    "\0\1\20\1\0\1\266\1\267\1\7\1\76\1\20\1\163\1\270\15\7\1\22\3\0\1\266\54\7"+
    "\1\204\2\0\10\7\1\143\6\7\5\0\1\7\1\217\2\25\2\0\2\25\1\271\2\0\1\272\4\0"+
    "\1\26\20\7\1\23\2\0\1\25\1\154\1\36\2\7\1\273\1\36\2\7\1\43\1\274\12\7\1\20"+
    "\3\143\1\275\4\0\1\7\1\136\2\7\1\20\2\7\1\276\1\7\1\204\1\7\1\204\4\0\17\7"+
    "\1\43\10\0\6\25\1\171\20\0\1\277\20\0\3\7\1\23\6\7\1\120\1\0\1\233\3\0\4\7"+
    "\2\0\2\7\1\55\1\300\4\7\1\57\1\44\3\7\1\204\4\7\1\217\1\7\1\301\5\0\23\7\1"+
    "\204\1\25\1\154\12\0\5\7\1\0\6\7\1\217\23\0\46\7\1\20\1\0\2\7\1\204\1\0\1"+
    "\7\23\0\1\204\1\76\4\7\1\33\1\302\2\7\1\204\1\0\2\7\1\20\1\0\3\7\1\20\10\0"+
    "\2\7\1\303\1\0\2\7\1\204\1\0\3\7\1\22\10\0\7\7\1\274\10\0\1\304\1\226\1\136"+
    "\1\36\2\7\1\217\1\110\4\0\3\7\1\23\3\7\1\23\4\0\1\7\1\36\2\7\1\305\3\0\6\7"+
    "\1\204\1\0\2\7\1\204\1\0\2\7\1\43\1\0\2\7\1\22\15\0\11\7\1\120\6\0\6\7\1\43"+
    "\1\0\6\7\1\43\41\0\1\221\6\7\1\25\1\153\3\0\1\114\1\25\1\0\1\102\1\221\5\7"+
    "\1\25\1\44\2\0\3\7\1\120\1\25\1\154\1\221\3\7\1\152\1\25\1\134\1\25\2\0\4"+
    "\7\1\306\1\0\1\221\5\7\1\45\1\25\1\307\1\310\1\25\1\311\4\0\2\7\1\32\2\7\1"+
    "\211\1\25\11\0\1\20\1\237\1\7\1\33\1\7\1\120\5\7\1\152\1\25\1\44\1\25\1\154"+
    "\1\132\1\74\1\75\2\7\1\76\1\116\1\100\1\51\1\111\1\131\1\241\1\72\2\171\41"+
    "\0\6\7\2\25\1\312\1\0\1\25\1\154\24\0\5\7\1\152\1\164\1\25\1\233\2\0\1\257"+
    "\4\0\6\7\2\25\1\313\1\0\1\25\1\154\4\0\5\7\1\45\1\25\1\0\1\25\1\154\6\0\3"+
    "\7\1\314\1\25\1\216\1\25\1\154\54\0\10\7\1\25\1\154\1\0\1\142\70\0\7\7\1\120"+
    "\40\0\63\7\1\22\14\0\15\25\1\153\2\0\30\7\1\217\27\0\5\7\1\20\72\0\10\7\1"+
    "\20\67\0\7\7\1\120\3\7\1\20\1\25\1\154\14\0\3\7\1\204\1\171\1\0\6\7\1\153"+
    "\1\0\1\217\1\0\1\25\1\154\1\266\2\7\1\241\2\7\56\0\10\7\1\23\1\0\1\71\4\25"+
    "\1\153\1\0\1\102\1\221\1\7\14\0\1\22\77\0\15\7\1\43\1\7\1\23\1\7\1\120\1\7"+
    "\1\315\130\0\1\272\1\316\1\44\1\66\1\317\1\216\3\0\1\320\22\0\1\310\67\0\12"+
    "\7\1\26\10\7\1\26\1\321\1\322\1\7\1\323\1\136\7\7\1\33\1\324\2\26\3\7\1\325"+
    "\1\163\1\143\1\76\51\7\1\204\3\7\1\76\2\7\1\202\3\7\1\202\2\7\1\26\3\7\1\26"+
    "\2\7\1\20\3\7\1\20\3\7\1\76\3\7\1\76\2\7\1\202\1\326\14\25\1\153\1\66\5\25"+
    "\1\171\1\277\1\0\1\234\2\0\1\66\1\40\1\25\52\0\30\7\1\23\1\0\1\153\45\0\1"+
    "\136\3\7\1\155\1\36\1\202\1\327\1\235\1\330\1\155\1\227\1\155\2\202\1\113"+
    "\1\7\1\32\1\7\1\217\1\331\1\32\1\7\1\217\116\0\3\25\1\154\3\25\1\154\3\25"+
    "\1\154\16\0\32\7\1\20\5\0\106\7\1\23\1\0\33\7\1\204\120\7\1\22\53\0\3\7\1"+
    "\204\134\0\36\25\2\0");

  /* The ZZ_CMAP_A table has 1744 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\1\3\2\1\2\0\1\2\1\0\1\15\1\25\1\5\2\0\1\12\1\32\1\33\2\0\1\17"+
    "\1\0\1\11\1\0\12\10\1\22\1\16\1\0\1\23\1\24\1\0\1\7\4\4\1\60\15\4\1\30\1\13"+
    "\1\31\1\20\1\5\1\6\1\50\1\47\1\36\1\40\1\35\1\56\1\45\1\53\1\55\2\4\1\46\1"+
    "\57\1\43\1\37\1\51\1\4\1\34\1\44\1\42\1\52\1\4\1\54\1\41\2\4\1\26\1\21\1\27"+
    "\7\0\1\14\4\0\1\4\12\0\1\4\2\0\7\4\1\0\2\4\4\0\4\4\6\0\5\4\7\0\1\4\1\0\1\4"+
    "\1\0\10\5\5\4\1\0\2\4\2\0\4\4\1\0\1\4\6\0\1\4\1\0\3\4\1\0\1\4\1\0\4\4\1\0"+
    "\13\4\1\0\3\4\1\0\7\5\6\4\1\0\7\4\1\0\1\4\7\0\15\5\1\0\1\5\1\0\2\5\1\0\2\5"+
    "\1\0\1\5\3\4\5\0\3\5\5\0\3\4\7\5\4\0\2\4\1\5\13\4\1\0\1\4\7\5\2\0\6\5\2\4"+
    "\2\5\1\0\4\5\2\4\2\5\3\4\2\0\2\4\1\5\6\4\3\5\2\0\11\4\3\5\1\4\6\0\4\5\2\4"+
    "\2\0\2\5\1\4\11\5\1\4\3\5\1\4\5\5\2\0\1\4\3\5\7\0\11\5\6\4\3\5\1\4\2\5\1\4"+
    "\7\5\2\4\2\5\2\0\2\5\1\4\3\5\1\0\10\4\2\0\2\4\2\0\6\4\1\0\7\4\1\0\1\4\3\0"+
    "\4\4\2\0\1\5\1\4\3\5\2\0\3\5\1\4\10\0\1\5\4\0\2\4\1\0\1\4\1\0\3\5\1\0\6\4"+
    "\4\0\2\4\1\0\2\4\1\0\2\4\1\0\2\4\2\0\1\5\1\0\5\5\4\0\2\5\2\0\3\5\3\0\1\5\7"+
    "\0\4\4\1\0\1\4\7\0\4\5\3\4\1\5\2\0\1\4\1\0\2\4\1\0\3\4\2\5\1\0\3\5\2\0\1\4"+
    "\11\0\1\5\1\4\1\0\6\4\3\0\3\4\1\0\4\4\3\0\2\4\1\0\1\4\1\0\2\4\3\0\2\4\3\0"+
    "\2\4\4\0\5\5\3\0\3\5\1\0\4\5\2\0\1\4\6\0\5\5\1\0\5\4\3\0\1\4\7\5\1\0\2\5\5"+
    "\0\2\5\1\0\4\4\1\0\3\4\1\0\2\4\5\0\3\4\2\0\1\4\3\5\1\0\4\5\1\4\10\0\1\4\2"+
    "\0\6\4\2\0\2\5\1\0\7\4\1\0\1\4\4\0\1\5\4\0\6\5\1\0\1\5\3\0\2\5\4\0\1\4\1\5"+
    "\2\4\4\5\7\4\10\5\1\0\2\5\7\0\2\4\1\0\1\4\2\0\2\4\1\0\1\4\2\0\1\4\6\0\4\4"+
    "\1\0\3\4\1\0\1\4\1\0\1\4\2\0\2\4\1\0\3\4\2\5\1\0\2\5\1\4\2\0\5\4\1\0\1\4\1"+
    "\0\6\5\2\0\2\5\2\0\4\4\5\0\1\5\1\0\1\5\1\0\1\5\4\0\2\5\5\4\10\5\11\0\1\5\1"+
    "\0\7\5\1\4\2\5\4\4\3\5\1\4\3\5\2\4\7\5\3\4\4\5\5\4\14\5\1\4\1\5\3\4\1\0\7"+
    "\4\2\0\3\5\6\4\2\0\3\4\3\0\2\5\2\4\3\5\3\0\2\4\2\5\4\0\1\4\1\0\2\5\4\0\4\4"+
    "\10\5\3\0\1\4\4\0\1\4\1\5\5\0\3\5\2\0\1\4\1\5\1\4\5\0\4\5\4\0\4\4\4\0\5\5"+
    "\3\4\3\5\5\4\2\5\3\0\3\4\3\5\1\0\5\5\4\4\1\5\4\4\3\5\2\4\5\0\4\5\1\0\1\4\1"+
    "\0\1\4\1\0\1\4\1\0\1\4\2\0\3\4\1\0\6\4\2\0\2\4\2\14\6\0\1\5\13\0\1\5\5\0\1"+
    "\4\4\0\1\4\1\0\5\4\2\0\1\4\1\0\4\4\1\0\3\4\2\0\4\4\5\0\5\4\4\0\1\4\1\0\3\5"+
    "\2\4\3\5\3\0\4\4\3\5\2\4\11\0\2\4\4\5\2\4\4\0\2\5\2\0\3\4\6\5\1\0\3\4\1\5"+
    "\3\4\1\5\4\4\1\5\4\4\3\0\1\4\1\0\1\4\2\0\5\4\1\5\2\4\2\5\5\4\1\0\4\4\2\5\4"+
    "\0\1\4\3\5\2\4\1\5\5\4\2\5\3\0\3\4\4\0\3\4\2\5\2\0\6\4\1\0\3\5\1\0\2\5\5\0"+
    "\5\4\5\0\1\4\1\5\3\4\1\0\2\4\1\0\2\4\3\0\2\5\10\0\3\5\3\4\4\0\1\5\6\0\2\4"+
    "\2\0\3\4\3\0\3\4\1\0\2\4\1\0\1\4\5\0\1\5\2\0\2\4\1\5\6\0\5\5\2\0\1\4\3\0\1"+
    "\4\2\0\4\4\1\0\2\4\2\0\1\4\3\5\1\0\2\5\1\0\5\4\2\5\1\0\3\4\1\5\2\0\1\4\1\0"+
    "\1\5\4\4\5\0\3\5\3\0\2\5\1\4\1\0\1\4\3\0\4\5\2\4\1\0\1\4\1\5\3\0\1\4\3\0\2"+
    "\4\3\0\3\5\2\4\3\0\2\5\1\0\2\5\3\0\6\5\2\0\3\5\2\0\4\5\4\0\1\4\2\0\2\4\2\0"+
    "\4\4\1\0\4\4\1\0\1\4\1\0\6\4\2\0\5\4\1\0\4\4\1\0\4\4\2\0\2\5\1\0\1\4\1\0\1"+
    "\4\5\0\1\4\1\0\1\4\1\0\3\4\1\0\3\4\1\0\3\4");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\2\1\1\10\1\11\1\12\1\13\2\1\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\14\4\2\0"+
    "\1\23\1\6\1\24\1\0\1\25\3\0\1\26\1\27"+
    "\16\4\1\30\2\4\1\31\1\0\11\4\1\32\11\4"+
    "\1\31\3\4\1\33\2\4\1\34\1\4\1\35\1\36"+
    "\1\4\1\37\6\4\1\0\1\40\4\4\1\41\1\42"+
    "\7\4\1\43\1\44\2\4\1\45\1\46\1\47\4\4"+
    "\1\50\13\4\1\51\3\4\1\52\1\53\1\54\2\4"+
    "\1\55\1\4\1\56";

  private static int [] zzUnpackAction() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\61\0\61\0\61\0\61\0\u021b"+
    "\0\u024c\0\61\0\61\0\61\0\61\0\61\0\61\0\61"+
    "\0\u027d\0\u02ae\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4"+
    "\0\u0405\0\u0436\0\u0467\0\u0498\0\u04c9\0\u04fa\0\61\0\u052b"+
    "\0\61\0\u01b9\0\61\0\u055c\0\u01ea\0\u058d\0\61\0\61"+
    "\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715"+
    "\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\304\0\u086c"+
    "\0\u089d\0\61\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3"+
    "\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\304\0\u0ab8\0\u0ae9\0\u0b1a"+
    "\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2"+
    "\0\u0cd3\0\u0d04\0\304\0\u0d35\0\u0d66\0\304\0\u0d97\0\304"+
    "\0\304\0\u0dc8\0\304\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd"+
    "\0\u0eee\0\u0c71\0\u0c71\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\304"+
    "\0\304\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109"+
    "\0\304\0\304\0\u113a\0\u116b\0\304\0\304\0\304\0\u119c"+
    "\0\u11cd\0\u11fe\0\u122f\0\304\0\u1260\0\u1291\0\u12c2\0\u12f3"+
    "\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a\0\304"+
    "\0\u147b\0\u14ac\0\u14dd\0\304\0\304\0\304\0\u150e\0\u153f"+
    "\0\304\0\u1570\0\304";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\11\1\12\2\2\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\2\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\3\5\1\34\1\35"+
    "\1\36\1\37\1\40\2\5\1\41\3\5\1\42\1\5"+
    "\1\43\1\44\62\0\2\3\1\4\56\0\3\4\61\0"+
    "\2\5\2\0\1\5\23\0\25\5\6\45\1\0\1\46"+
    "\51\45\7\0\1\47\61\0\1\10\1\50\60\0\1\51"+
    "\47\0\12\52\1\53\1\54\45\52\13\55\1\56\1\55"+
    "\1\53\43\55\23\0\1\57\61\0\1\60\40\0\2\5"+
    "\2\0\1\5\23\0\1\5\1\61\23\5\4\0\2\5"+
    "\2\0\1\5\23\0\5\5\1\62\4\5\1\63\12\5"+
    "\4\0\2\5\2\0\1\5\23\0\3\5\1\64\10\5"+
    "\1\65\10\5\4\0\2\5\2\0\1\5\23\0\17\5"+
    "\1\66\5\5\4\0\2\5\2\0\1\5\23\0\1\5"+
    "\1\67\14\5\1\70\6\5\4\0\2\5\2\0\1\5"+
    "\23\0\20\5\1\71\4\5\4\0\2\5\2\0\1\5"+
    "\23\0\3\5\1\72\6\5\1\73\12\5\4\0\2\5"+
    "\2\0\1\5\23\0\1\5\1\74\23\5\4\0\2\5"+
    "\2\0\1\5\23\0\1\75\24\5\4\0\2\5\2\0"+
    "\1\5\23\0\7\5\1\76\12\5\1\77\2\5\4\0"+
    "\2\5\2\0\1\5\23\0\3\5\1\100\21\5\4\0"+
    "\2\5\2\0\1\5\23\0\5\5\1\101\17\5\6\45"+
    "\1\102\60\45\1\102\1\103\51\45\10\0\1\50\50\0"+
    "\1\52\1\0\1\52\1\0\10\52\1\0\44\52\1\55"+
    "\1\0\1\55\1\0\10\55\1\0\44\55\4\0\2\5"+
    "\2\0\1\5\23\0\2\5\1\104\3\5\1\105\16\5"+
    "\4\0\2\5\2\0\1\5\23\0\6\5\1\106\16\5"+
    "\4\0\2\5\2\0\1\5\23\0\10\5\1\107\14\5"+
    "\4\0\2\5\2\0\1\5\23\0\7\5\1\110\15\5"+
    "\4\0\2\5\2\0\1\5\23\0\6\5\1\111\3\5"+
    "\1\112\12\5\4\0\2\5\2\0\1\5\23\0\1\113"+
    "\1\114\23\5\4\0\2\5\2\0\1\5\23\0\20\5"+
    "\1\115\4\5\4\0\2\5\2\0\1\5\23\0\12\5"+
    "\1\116\12\5\4\0\2\5\2\0\1\5\23\0\21\5"+
    "\1\117\3\5\4\0\2\5\2\0\1\5\23\0\6\5"+
    "\1\120\16\5\4\0\2\5\2\0\1\5\23\0\3\5"+
    "\1\121\21\5\4\0\2\5\2\0\1\5\23\0\7\5"+
    "\1\122\15\5\4\0\2\5\2\0\1\5\23\0\3\5"+
    "\1\123\21\5\4\0\2\5\2\0\1\5\23\0\10\5"+
    "\1\124\14\5\4\0\2\5\2\0\1\5\23\0\7\5"+
    "\1\125\15\5\4\0\2\5\2\0\1\5\23\0\2\5"+
    "\1\126\22\5\6\103\1\127\52\103\4\0\2\5\2\0"+
    "\1\5\23\0\3\5\1\130\21\5\4\0\2\5\2\0"+
    "\1\5\23\0\16\5\1\131\6\5\4\0\2\5\2\0"+
    "\1\5\23\0\1\5\1\132\23\5\4\0\2\5\2\0"+
    "\1\5\23\0\1\5\1\133\23\5\4\0\2\5\2\0"+
    "\1\5\23\0\10\5\1\134\14\5\4\0\2\5\2\0"+
    "\1\5\23\0\2\5\1\135\22\5\4\0\2\5\2\0"+
    "\1\5\23\0\12\5\1\136\12\5\4\0\2\5\2\0"+
    "\1\5\23\0\3\5\1\137\21\5\4\0\2\5\2\0"+
    "\1\5\23\0\7\5\1\140\15\5\4\0\2\5\2\0"+
    "\1\5\23\0\12\5\1\141\12\5\4\0\2\5\2\0"+
    "\1\5\23\0\6\5\1\142\16\5\4\0\2\5\2\0"+
    "\1\5\23\0\3\5\1\143\21\5\4\0\2\5\2\0"+
    "\1\5\23\0\13\5\1\144\11\5\4\0\2\5\2\0"+
    "\1\5\23\0\11\5\1\145\13\5\4\0\2\5\2\0"+
    "\1\5\23\0\2\5\1\146\22\5\4\0\2\5\2\0"+
    "\1\5\23\0\6\5\1\147\16\5\4\0\2\5\2\0"+
    "\1\5\23\0\21\5\1\150\3\5\4\0\2\5\2\0"+
    "\1\5\23\0\1\5\1\151\23\5\6\152\1\153\52\152"+
    "\4\0\2\5\2\0\1\5\23\0\1\154\24\5\4\0"+
    "\2\5\2\0\1\5\23\0\1\155\24\5\4\0\2\5"+
    "\2\0\1\5\23\0\7\5\1\156\15\5\4\0\2\5"+
    "\2\0\1\5\23\0\6\5\1\157\16\5\4\0\2\5"+
    "\2\0\1\5\23\0\17\5\1\160\5\5\4\0\2\5"+
    "\2\0\1\5\23\0\20\5\1\161\4\5\4\0\2\5"+
    "\2\0\1\5\23\0\2\5\1\162\22\5\4\0\2\5"+
    "\2\0\1\5\23\0\14\5\1\163\10\5\4\0\2\5"+
    "\2\0\1\5\23\0\6\5\1\164\16\5\4\0\2\5"+
    "\2\0\1\5\23\0\1\5\1\165\23\5\4\0\2\5"+
    "\2\0\1\5\23\0\14\5\1\166\10\5\4\0\2\5"+
    "\2\0\1\5\23\0\6\5\1\167\16\5\4\0\2\5"+
    "\2\0\1\5\23\0\15\5\1\170\7\5\4\0\2\5"+
    "\2\0\1\5\23\0\4\5\1\171\20\5\4\0\2\5"+
    "\2\0\1\5\23\0\7\5\1\172\15\5\4\0\2\5"+
    "\2\0\1\5\23\0\4\5\1\173\20\5\4\0\2\5"+
    "\2\0\1\5\23\0\2\5\1\174\22\5\4\0\2\5"+
    "\2\0\1\5\23\0\17\5\1\175\5\5\4\0\2\5"+
    "\2\0\1\5\23\0\12\5\1\176\12\5\4\0\2\5"+
    "\2\0\1\5\23\0\17\5\1\177\5\5\4\0\2\5"+
    "\2\0\1\5\23\0\4\5\1\200\20\5\4\0\2\5"+
    "\2\0\1\5\23\0\7\5\1\201\15\5\4\0\2\5"+
    "\2\0\1\5\23\0\3\5\1\202\21\5\4\0\2\5"+
    "\2\0\1\5\23\0\6\5\1\203\16\5\4\0\2\5"+
    "\2\0\1\5\23\0\10\5\1\204\14\5\4\0\2\5"+
    "\2\0\1\5\23\0\12\5\1\205\12\5\4\0\2\5"+
    "\2\0\1\5\23\0\16\5\1\206\6\5\4\0\2\5"+
    "\2\0\1\5\23\0\2\5\1\207\22\5\4\0\2\5"+
    "\2\0\1\5\23\0\1\210\24\5\4\0\2\5\2\0"+
    "\1\5\23\0\21\5\1\211\3\5\4\0\2\5\2\0"+
    "\1\5\23\0\14\5\1\212\10\5\4\0\2\5\2\0"+
    "\1\5\23\0\1\213\24\5\4\0\2\5\2\0\1\5"+
    "\23\0\1\5\1\214\23\5\4\0\2\5\2\0\1\5"+
    "\23\0\1\5\1\215\23\5\4\0\2\5\2\0\1\5"+
    "\23\0\3\5\1\216\21\5\4\0\2\5\2\0\1\5"+
    "\23\0\10\5\1\217\14\5\4\0\2\5\2\0\1\5"+
    "\23\0\1\5\1\220\23\5\4\0\2\5\2\0\1\5"+
    "\23\0\3\5\1\221\21\5\4\0\2\5\2\0\1\5"+
    "\23\0\5\5\1\222\1\5\1\223\15\5\4\0\2\5"+
    "\2\0\1\5\23\0\7\5\1\224\15\5\4\0\2\5"+
    "\2\0\1\5\23\0\10\5\1\225\14\5\4\0\2\5"+
    "\2\0\1\5\23\0\22\5\1\226\2\5\4\0\2\5"+
    "\2\0\1\5\23\0\21\5\1\227\3\5\4\0\2\5"+
    "\2\0\1\5\23\0\6\5\1\230\16\5\4\0\2\5"+
    "\2\0\1\5\23\0\6\5\1\231\16\5\4\0\2\5"+
    "\2\0\1\5\23\0\1\5\1\232\23\5\4\0\2\5"+
    "\2\0\1\5\23\0\1\233\24\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5537];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\11\1\4\11\2\1\7\11\14\1\2\0"+
    "\1\11\1\1\1\11\1\0\1\11\3\0\2\11\21\1"+
    "\1\11\1\0\46\1\1\0\61\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _JawaLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _JawaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          case 47: break;
          case 2: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          case 48: break;
          case 3: 
            { return WS;
            }
          case 49: break;
          case 4: 
            { return ID;
            }
          case 50: break;
          case 5: 
            { return AT;
            }
          case 51: break;
          case 6: 
            { return NUMBER;
            }
          case 52: break;
          case 7: 
            { return DOT;
            }
          case 53: break;
          case 8: 
            { return SEMI;
            }
          case 54: break;
          case 9: 
            { return COMMA;
            }
          case 55: break;
          case 10: 
            { return HAT;
            }
          case 56: break;
          case 11: 
            { return BAR;
            }
          case 57: break;
          case 12: 
            { return POUND;
            }
          case 58: break;
          case 13: 
            { return LBRACE;
            }
          case 59: break;
          case 14: 
            { return RBRACE;
            }
          case 60: break;
          case 15: 
            { return LBRACKET;
            }
          case 61: break;
          case 16: 
            { return RBRACKET;
            }
          case 62: break;
          case 17: 
            { return LPAREN;
            }
          case 63: break;
          case 18: 
            { return RPAREN;
            }
          case 64: break;
          case 19: 
            { return STATIC_PREFIX;
            }
          case 65: break;
          case 20: 
            { return RANGE;
            }
          case 66: break;
          case 21: 
            { return STRING_LITERAL;
            }
          case 67: break;
          case 22: 
            { return ASSIGN_OP;
            }
          case 68: break;
          case 23: 
            { return ARROW;
            }
          case 69: break;
          case 24: 
            { return IF;
            }
          case 70: break;
          case 25: 
            { return APOSTROPHE_ID;
            }
          case 71: break;
          case 26: 
            { return NEW;
            }
          case 72: break;
          case 27: 
            { return ELSE;
            }
          case 73: break;
          case 28: 
            { return CALL;
            }
          case 74: break;
          case 29: 
            { return THEN;
            }
          case 75: break;
          case 30: 
            { return NULL_LITERAL;
            }
          case 76: break;
          case 31: 
            { return GOTO;
            }
          case 77: break;
          case 32: 
            { return STATIC_ID;
            }
          case 78: break;
          case 33: 
            { return CATCH;
            }
          case 79: break;
          case 34: 
            { return THROW;
            }
          case 80: break;
          case 35: 
            { return CLASS_OR_INTERFACE;
            }
          case 81: break;
          case 36: 
            { return RETURN;
            }
          case 82: break;
          case 37: 
            { return SWITCH;
            }
          case 83: break;
          case 38: 
            { return STATIC_FIELD;
            }
          case 84: break;
          case 39: 
            { return LENGTH;
            }
          case 85: break;
          case 40: 
            { return EXTENDS_AND_IMPLEMENTS;
            }
          case 86: break;
          case 41: 
            { return METHOD;
            }
          case 87: break;
          case 42: 
            { return EXCEPTION;
            }
          case 88: break;
          case 43: 
            { return CONST_CLASS;
            }
          case 89: break;
          case 44: 
            { return INSTANCEOF;
            }
          case 90: break;
          case 45: 
            { return MONITOR_EXIT;
            }
          case 91: break;
          case 46: 
            { return MONITOR_ENTER;
            }
          case 92: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
