/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package org.argus.cit.intellij.jawa.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.argus.cit.intellij.jawa.lang.psi.JawaElementTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_JawaLexer.flex</tt>
 */
public class _JawaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 16752 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\21\1\22\3\21\1\23\1\24\1\25\1\21\14\26\1\27\50\26\1\30\2\26\1\31\1\32"+
    "\1\33\1\34\25\26\1\35\20\21\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1"+
    "\47\1\50\1\21\1\51\1\52\1\53\1\54\1\55\1\56\2\21\1\26\1\57\1\60\5\21\2\26"+
    "\1\61\7\21\1\26\1\62\20\21\1\26\1\63\1\21\1\64\40\21\1\65\5\21\1\66\11\21"+
    "\1\67\1\70\1\71\1\72\1\21\1\73\6\21\1\74\2\21\1\75\1\76\7\21\123\26\1\77\7"+
    "\26\1\100\1\101\12\26\1\102\24\21\1\26\1\103\u0582\21\1\104\u017f\21");

  /* The ZZ_CMAP_Y table has 4416 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\11\1\12\1\13\1\14\1\15\3\0\1\16"+
    "\1\17\1\20\1\17\2\7\1\21\3\7\1\21\71\7\1\22\1\7\1\23\1\0\1\24\1\25\2\0\16"+
    "\26\1\27\1\30\1\31\1\32\2\7\1\33\11\7\1\34\21\7\1\35\1\36\24\7\1\37\3\7\1"+
    "\21\1\40\1\37\4\7\1\0\1\41\4\26\1\42\1\43\1\0\3\7\2\44\3\0\1\26\1\45\5\7\1"+
    "\46\3\26\1\47\1\50\13\7\1\51\1\52\1\53\1\54\1\26\1\55\2\0\1\56\3\7\3\26\1"+
    "\57\12\7\1\60\1\26\1\61\1\0\1\26\1\36\3\7\1\46\1\62\1\17\2\7\1\60\1\63\1\64"+
    "\1\65\2\0\3\7\1\66\10\0\2\7\1\24\5\0\1\67\3\26\1\70\6\7\1\71\2\26\1\72\1\7"+
    "\1\73\1\26\1\37\1\7\1\74\1\75\1\76\2\7\1\77\1\100\1\101\1\52\1\102\1\103\1"+
    "\104\1\73\1\26\1\23\1\0\1\105\1\106\1\76\2\7\1\77\1\107\1\110\1\111\1\112"+
    "\1\113\1\114\1\115\1\26\1\116\1\0\1\105\1\34\1\33\2\7\1\77\1\117\1\101\1\42"+
    "\1\120\1\121\1\0\1\73\1\26\1\0\1\40\1\105\1\75\1\76\2\7\1\77\1\117\1\101\1"+
    "\52\1\112\1\115\1\104\1\73\1\26\1\40\1\0\1\122\1\123\1\124\1\125\1\126\1\123"+
    "\1\7\1\127\1\130\1\131\1\132\1\0\1\115\1\26\2\0\1\133\1\27\1\77\2\7\1\77\1"+
    "\7\1\134\1\135\1\131\1\136\1\44\1\73\1\26\2\0\1\105\1\27\1\77\2\7\1\77\1\137"+
    "\1\101\1\135\1\131\1\136\1\31\1\73\1\26\1\140\1\0\1\105\1\27\1\77\4\7\1\141"+
    "\1\135\1\142\1\103\1\143\1\73\1\26\1\0\1\144\1\145\1\7\1\21\1\144\2\7\1\33"+
    "\1\146\1\21\1\147\1\150\1\26\1\115\1\26\1\151\1\0\1\37\5\7\1\152\1\45\1\153"+
    "\1\154\1\26\1\155\4\0\1\156\1\157\1\160\1\37\1\161\1\162\1\152\1\163\1\164"+
    "\1\165\1\26\1\166\4\0\1\121\2\0\1\155\1\26\1\155\1\167\1\170\1\7\1\37\3\7"+
    "\1\24\1\41\1\26\1\135\1\171\1\26\1\41\3\26\1\172\1\173\7\0\5\7\1\46\1\26\1"+
    "\174\1\26\1\155\1\60\1\175\1\176\1\177\1\200\1\7\1\201\1\202\1\26\1\165\4"+
    "\7\1\34\1\20\5\7\1\203\51\7\1\124\1\21\1\124\5\7\1\124\4\7\1\124\1\21\1\124"+
    "\1\7\1\21\7\7\1\124\10\7\1\204\4\0\2\7\2\0\12\7\2\205\1\37\114\7\1\75\2\7"+
    "\1\206\2\7\1\44\11\7\1\207\1\50\1\121\1\7\1\27\1\210\1\0\2\7\1\210\1\0\2\7"+
    "\1\211\1\0\1\7\1\27\1\212\1\0\6\7\1\213\3\26\1\214\1\215\1\26\1\155\3\0\1"+
    "\216\1\26\1\155\13\7\1\0\5\7\1\217\10\7\1\205\1\0\3\7\1\21\1\26\1\220\1\26"+
    "\1\220\1\115\1\26\3\7\1\205\1\24\1\0\5\7\1\221\3\7\1\23\1\26\1\155\4\0\2\7"+
    "\1\153\1\220\6\7\1\171\1\154\3\26\1\52\1\26\1\155\1\26\1\155\1\143\1\0\1\26"+
    "\1\154\10\0\1\222\5\7\1\213\1\26\1\222\1\221\1\26\1\155\1\0\1\67\1\220\1\0"+
    "\1\223\3\7\1\72\1\177\1\26\1\36\4\7\1\60\1\26\1\220\1\0\4\7\1\213\2\26\1\0"+
    "\1\26\1\224\1\26\1\36\3\7\1\205\12\0\1\225\2\26\1\226\1\227\1\155\30\7\6\26"+
    "\1\165\1\230\42\7\2\205\4\7\2\205\1\7\1\231\3\7\1\205\6\7\1\27\1\164\1\232"+
    "\1\24\1\233\1\221\1\7\1\24\1\232\1\24\1\234\1\235\3\0\1\236\1\0\1\103\1\237"+
    "\1\0\1\240\1\241\2\0\1\40\1\143\2\0\1\7\1\24\6\0\4\26\1\237\1\0\1\242\1\144"+
    "\1\146\1\243\1\25\1\244\1\7\1\245\1\246\1\247\2\0\4\26\1\250\1\237\144\0\1"+
    "\115\6\26\1\155\42\0\5\7\1\21\5\7\1\21\20\7\1\24\1\251\1\252\1\0\4\7\1\34"+
    "\1\20\7\7\1\143\1\0\1\103\2\7\1\21\1\0\10\21\4\26\5\0\1\143\72\0\1\253\3\0"+
    "\1\41\1\26\1\243\1\254\1\37\11\7\1\21\1\255\1\37\12\7\1\203\1\246\4\7\1\205"+
    "\1\37\12\7\1\21\2\0\3\7\1\44\6\0\170\7\1\205\11\0\72\7\1\205\5\0\21\7\1\24"+
    "\10\0\5\7\1\205\41\7\1\24\2\7\1\26\1\252\2\0\5\7\1\153\1\225\1\256\3\7\1\60"+
    "\10\7\1\60\1\26\1\155\3\0\1\143\1\7\1\144\14\7\1\76\3\7\1\205\1\7\7\0\1\143"+
    "\1\7\1\257\1\260\2\7\1\46\3\0\6\7\1\221\1\0\1\36\5\7\1\213\1\26\1\172\1\0"+
    "\1\26\1\155\2\26\1\36\1\261\1\26\1\36\2\7\1\60\1\165\2\7\1\153\1\26\1\220"+
    "\1\0\3\7\1\24\1\70\5\7\1\46\1\26\1\237\1\143\1\26\1\155\1\262\1\7\1\26\1\263"+
    "\5\7\1\72\1\154\1\0\1\260\1\264\1\26\1\155\2\7\1\21\1\265\6\7\1\176\1\266"+
    "\1\217\2\0\1\267\1\7\1\46\1\270\1\0\3\271\1\0\2\21\5\7\1\203\1\205\1\0\16"+
    "\7\1\46\1\272\1\26\1\155\64\7\1\221\1\0\2\7\1\21\1\273\5\7\1\221\40\0\55\7"+
    "\1\205\15\7\1\23\4\0\1\21\1\0\1\273\1\274\1\7\1\77\1\21\1\164\1\275\15\7\1"+
    "\23\3\0\1\273\54\7\1\205\2\0\10\7\1\144\6\7\5\0\1\7\1\221\2\26\2\0\2\26\1"+
    "\276\2\0\1\277\4\0\1\27\20\7\1\24\2\0\1\26\1\155\1\37\2\7\1\300\1\37\2\7\1"+
    "\44\1\301\12\7\1\21\3\144\1\302\4\0\1\7\1\137\2\7\1\21\2\7\1\303\1\7\1\205"+
    "\1\7\1\205\4\0\17\7\1\44\10\0\6\26\1\172\20\0\1\304\20\0\3\7\1\24\6\7\1\121"+
    "\1\0\1\237\3\0\4\7\2\0\2\7\1\56\1\305\4\7\1\60\1\45\3\7\1\205\4\7\1\221\1"+
    "\7\1\306\5\0\23\7\1\205\1\26\1\155\12\0\5\7\1\0\6\7\1\221\23\0\46\7\1\21\1"+
    "\0\2\7\1\205\1\0\1\7\23\0\1\205\1\77\4\7\1\34\1\307\2\7\1\205\1\0\2\7\1\21"+
    "\1\0\3\7\1\21\10\0\2\7\1\310\1\0\2\7\1\205\1\0\3\7\1\23\10\0\7\7\1\301\10"+
    "\0\1\311\1\230\1\137\1\37\2\7\1\221\1\111\4\0\3\7\1\24\3\7\1\24\4\0\1\7\1"+
    "\37\2\7\1\312\3\0\6\7\1\205\1\0\2\7\1\205\1\0\2\7\1\44\1\0\2\7\1\23\15\0\11"+
    "\7\1\121\6\0\6\7\1\44\1\0\6\7\1\44\41\0\1\223\6\7\1\26\1\154\3\0\1\115\1\26"+
    "\1\0\1\103\1\223\5\7\1\26\1\45\2\0\3\7\1\121\1\26\1\155\1\223\3\7\1\153\1"+
    "\26\1\135\1\26\2\0\4\7\1\313\1\0\1\223\5\7\1\46\1\26\1\314\1\315\1\26\1\316"+
    "\4\0\2\7\1\33\2\7\1\213\1\26\11\0\1\21\1\244\1\7\1\34\1\7\1\121\5\7\1\153"+
    "\1\26\1\45\1\26\1\155\1\133\1\75\1\76\2\7\1\77\1\117\1\101\1\52\1\112\1\132"+
    "\1\246\1\73\2\172\41\0\6\7\2\26\1\317\1\0\1\26\1\155\24\0\5\7\1\153\1\165"+
    "\1\26\1\237\2\0\1\264\4\0\6\7\2\26\1\320\1\0\1\26\1\155\4\0\5\7\1\46\1\26"+
    "\1\0\1\26\1\155\6\0\3\7\1\321\1\26\1\220\1\26\1\155\54\0\10\7\1\26\1\155\1"+
    "\0\1\143\70\0\7\7\1\121\40\0\63\7\1\23\14\0\15\26\1\154\2\0\30\7\1\221\27"+
    "\0\5\7\1\21\72\0\10\7\1\21\67\0\7\7\1\121\3\7\1\21\1\26\1\155\14\0\3\7\1\205"+
    "\1\172\1\0\6\7\1\154\1\0\1\221\1\0\1\26\1\155\1\273\2\7\1\246\2\7\56\0\10"+
    "\7\1\24\1\0\1\72\4\26\1\154\1\0\1\103\1\223\1\7\14\0\1\23\77\0\15\7\1\44\1"+
    "\7\1\24\1\7\1\121\1\7\1\322\130\0\1\277\1\323\1\45\1\67\1\324\1\220\3\0\1"+
    "\325\22\0\1\315\67\0\12\7\1\27\10\7\1\27\1\326\1\327\1\7\1\330\1\137\7\7\1"+
    "\34\1\331\2\27\3\7\1\332\1\164\1\144\1\77\51\7\1\205\3\7\1\77\2\7\1\203\3"+
    "\7\1\203\2\7\1\27\3\7\1\27\2\7\1\21\3\7\1\21\3\7\1\77\3\7\1\77\2\7\1\203\1"+
    "\333\14\26\1\154\1\67\5\26\1\172\1\304\1\0\1\240\2\0\1\67\1\41\1\26\52\0\30"+
    "\7\1\24\1\0\1\154\45\0\1\137\3\7\1\156\1\37\1\203\1\334\1\242\1\335\1\156"+
    "\1\231\1\156\2\203\1\114\1\7\1\33\1\7\1\221\1\336\1\33\1\7\1\221\116\0\3\26"+
    "\1\155\3\26\1\155\3\26\1\155\16\0\32\7\1\21\5\0\106\7\1\24\1\0\33\7\1\205"+
    "\120\7\1\23\53\0\3\7\1\205\134\0\36\26\2\0");

  /* The ZZ_CMAP_A table has 1784 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\2\0\1\2\1\75\1\15\1\10\1\5\1\71\1\72\1\13\1\31\1\32\1\67\1\65"+
    "\1\17\1\66\1\11\1\70\12\12\1\22\1\16\1\74\1\23\1\24\1\0\1\7\1\63\2\3\1\61"+
    "\1\57\1\64\14\3\1\27\1\14\1\30\1\20\1\4\1\6\1\47\1\46\1\35\1\37\1\34\1\55"+
    "\1\44\1\52\1\54\1\3\1\62\1\45\1\56\1\42\1\36\1\50\1\3\1\33\1\43\1\41\1\51"+
    "\1\3\1\53\1\40\1\60\1\3\1\25\1\21\1\26\1\73\6\0\1\1\2\0\1\2\11\0\1\3\12\0"+
    "\1\3\2\0\7\3\1\0\2\3\4\0\4\3\6\0\5\3\7\0\1\3\1\0\1\3\1\0\10\4\5\3\1\0\2\3"+
    "\2\0\4\3\1\0\1\3\6\0\1\3\1\0\3\3\1\0\1\3\1\0\4\3\1\0\13\3\1\0\3\3\1\0\7\4"+
    "\6\3\1\0\7\3\1\0\1\3\7\0\15\4\1\0\1\4\1\0\2\4\1\0\2\4\1\0\1\4\3\3\5\0\3\4"+
    "\5\0\3\3\7\4\4\0\2\3\1\4\13\3\1\0\1\3\7\4\2\0\6\4\2\3\2\4\1\0\4\4\2\3\2\4"+
    "\3\3\2\0\2\3\1\4\6\3\3\4\2\0\11\3\3\4\1\3\6\0\4\4\2\3\2\0\2\4\1\3\11\4\1\3"+
    "\3\4\1\3\5\4\2\0\1\3\3\4\7\0\11\4\6\3\3\4\1\3\2\4\1\3\7\4\2\3\2\4\2\0\2\4"+
    "\1\3\3\4\1\0\10\3\2\0\2\3\2\0\6\3\1\0\7\3\1\0\1\3\3\0\4\3\2\0\1\4\1\3\3\4"+
    "\2\0\3\4\1\3\10\0\1\4\4\0\2\3\1\0\1\3\1\0\3\4\1\0\6\3\4\0\2\3\1\0\2\3\1\0"+
    "\2\3\1\0\2\3\2\0\1\4\1\0\5\4\4\0\2\4\2\0\3\4\3\0\1\4\7\0\4\3\1\0\1\3\7\0\4"+
    "\4\3\3\1\4\2\0\1\3\1\0\2\3\1\0\3\3\2\4\1\0\3\4\2\0\1\3\11\0\1\4\1\3\1\0\6"+
    "\3\3\0\3\3\1\0\4\3\3\0\2\3\1\0\1\3\1\0\2\3\3\0\2\3\3\0\2\3\4\0\5\4\3\0\3\4"+
    "\1\0\4\4\2\0\1\3\6\0\5\4\1\0\5\3\3\0\1\3\7\4\1\0\2\4\5\0\2\4\1\0\4\3\1\0\3"+
    "\3\1\0\2\3\5\0\3\3\2\0\1\3\3\4\1\0\4\4\1\3\10\0\1\3\2\0\6\3\2\0\2\4\1\0\7"+
    "\3\1\0\1\3\4\0\1\4\4\0\6\4\1\0\1\4\3\0\2\4\4\0\1\3\1\4\2\3\4\4\7\3\10\4\1"+
    "\0\2\4\7\0\2\3\1\0\1\3\2\0\2\3\1\0\1\3\2\0\1\3\6\0\4\3\1\0\3\3\1\0\1\3\1\0"+
    "\1\3\2\0\2\3\1\0\3\3\2\4\1\0\2\4\1\3\2\0\5\3\1\0\1\3\1\0\6\4\2\0\2\4\2\0\4"+
    "\3\5\0\1\4\1\0\1\4\1\0\1\4\4\0\2\4\5\3\10\4\11\0\1\4\1\0\7\4\1\3\2\4\4\3\3"+
    "\4\1\3\3\4\2\3\7\4\3\3\4\4\5\3\14\4\1\3\1\4\3\3\1\0\7\3\2\0\3\4\6\3\2\0\1"+
    "\2\12\3\3\0\2\4\2\3\3\4\3\0\2\3\2\4\4\0\1\3\1\0\2\4\4\0\4\3\10\4\3\0\1\3\4"+
    "\0\1\3\1\4\5\0\3\4\2\0\1\3\1\4\1\3\5\0\4\4\4\0\4\3\4\0\5\4\3\3\3\4\5\3\2\4"+
    "\3\0\3\3\3\4\1\0\5\4\4\3\1\4\4\3\3\4\2\3\5\0\4\4\1\0\1\3\1\0\1\3\1\0\1\3\1"+
    "\0\1\3\2\0\3\3\1\0\6\3\2\0\2\3\13\2\5\0\2\1\5\0\1\2\1\4\13\0\1\4\12\0\1\2"+
    "\2\0\1\3\4\0\1\3\1\0\5\3\2\0\1\3\1\0\4\3\1\0\3\3\2\0\4\3\5\0\5\3\4\0\1\3\1"+
    "\0\3\4\2\3\3\4\3\0\4\3\3\4\2\3\4\0\1\2\4\0\2\3\4\4\2\3\4\0\2\4\2\0\3\3\6\4"+
    "\1\0\3\3\1\4\3\3\1\4\4\3\1\4\4\3\3\0\1\3\1\0\1\3\2\0\5\3\1\4\2\3\2\4\5\3\1"+
    "\0\4\3\2\4\4\0\1\3\3\4\2\3\1\4\5\3\2\4\3\0\3\3\4\0\3\3\2\4\2\0\6\3\1\0\3\4"+
    "\1\0\2\4\5\0\5\3\5\0\1\3\1\4\3\3\1\0\2\3\1\0\2\3\3\0\2\4\10\0\3\4\3\3\4\0"+
    "\1\4\6\0\2\3\2\0\3\3\3\0\3\3\1\0\2\3\1\0\1\3\5\0\1\4\2\0\2\3\1\4\6\0\5\4\2"+
    "\0\1\3\3\0\1\3\2\0\4\3\1\0\2\3\2\0\1\3\3\4\1\0\2\4\1\0\5\3\2\4\1\0\3\3\1\4"+
    "\2\0\1\3\1\0\1\4\4\3\5\0\3\4\3\0\2\4\1\3\1\0\1\3\3\0\4\4\2\3\1\0\1\3\1\4\3"+
    "\0\1\3\3\0\2\3\3\0\3\4\2\3\3\0\2\4\1\0\2\4\3\0\6\4\2\0\3\4\2\0\4\4\4\0\1\3"+
    "\2\0\2\3\2\0\4\3\1\0\4\3\1\0\1\3\1\0\6\3\2\0\5\3\1\0\4\3\1\0\4\3\2\0\2\4\1"+
    "\0\1\3\1\0\1\3\5\0\1\3\1\0\1\3\1\0\3\3\1\0\3\3\1\0\3\3");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\2\1\1\10\1\11\1\12\1\13\2\1\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\16\3\1\23"+
    "\1\24\1\25\1\26\1\1\1\27\1\30\1\1\2\0"+
    "\10\31\1\0\1\32\1\7\1\0\1\33\3\0\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\20\3\1\45\3\3\1\46\1\47\1\50\1\51\1\0"+
    "\7\31\1\5\1\52\12\3\1\53\13\3\1\0\7\31"+
    "\3\3\1\54\2\3\1\55\2\3\1\56\1\57\1\3"+
    "\1\60\2\3\1\61\5\3\1\62\2\31\1\63\2\31"+
    "\1\64\1\31\4\3\1\65\1\66\1\67\1\70\5\3"+
    "\1\71\1\72\2\3\1\31\1\73\3\31\1\74\1\75"+
    "\2\3\1\76\1\77\1\100\4\3\4\31\1\101\5\3"+
    "\4\31\5\3\4\31\1\3\1\102\3\3\1\103\1\31"+
    "\1\104\3\31\1\105\1\106\2\3\3\31\1\107\1\110"+
    "\1\3\1\31\1\111\1\31\1\112\1\31\1\113\2\31"+
    "\1\114";

  private static int [] zzUnpackAction() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\76\0\76\0\u02aa\0\76\0\u02e8"+
    "\0\u0326\0\u0364\0\76\0\76\0\76\0\76\0\76\0\76"+
    "\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0554"+
    "\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8\0\76\0\76"+
    "\0\76\0\76\0\u0706\0\76\0\u0744\0\u0782\0\u07c0\0\u07fe"+
    "\0\u083c\0\u087a\0\u08b8\0\u08f6\0\u0934\0\u0972\0\u09b0\0\u09ee"+
    "\0\u0a2c\0\76\0\u0a6a\0\u022e\0\76\0\u0aa8\0\u026c\0\u0ae6"+
    "\0\76\0\u0b24\0\76\0\76\0\76\0\76\0\76\0\76"+
    "\0\76\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6"+
    "\0\u0d14\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6"+
    "\0\u0f04\0\272\0\u0f42\0\u0f80\0\u0fbe\0\76\0\76\0\76"+
    "\0\76\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170"+
    "\0\u11ae\0\76\0\76\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4"+
    "\0\u1322\0\u1360\0\u139e\0\u13dc\0\u141a\0\272\0\u1458\0\u1496"+
    "\0\u14d4\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686"+
    "\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc\0\u17fa\0\u1838\0\u1876"+
    "\0\u18b4\0\u18f2\0\u1930\0\u196e\0\272\0\u19ac\0\u19ea\0\272"+
    "\0\u1a28\0\u1a66\0\272\0\272\0\u1aa4\0\272\0\u1ae2\0\u1b20"+
    "\0\272\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\76\0\u1c94"+
    "\0\u1cd2\0\u083c\0\u1d10\0\u1d4e\0\u083c\0\u1d8c\0\u1dca\0\u1e08"+
    "\0\u1e46\0\u1e84\0\272\0\272\0\272\0\272\0\u1ec2\0\u1f00"+
    "\0\u1f3e\0\u1f7c\0\u1fba\0\272\0\272\0\u1ff8\0\u2036\0\u2074"+
    "\0\u083c\0\u20b2\0\u20f0\0\u212e\0\272\0\272\0\u216c\0\u21aa"+
    "\0\272\0\272\0\272\0\u21e8\0\u2226\0\u2264\0\u22a2\0\u22e0"+
    "\0\u231e\0\u235c\0\u239a\0\272\0\u23d8\0\u2416\0\u2454\0\u2492"+
    "\0\u24d0\0\u250e\0\u254c\0\u258a\0\u25c8\0\u2606\0\u2644\0\u2682"+
    "\0\u26c0\0\u26fe\0\u273c\0\u277a\0\u27b8\0\u27f6\0\u2834\0\272"+
    "\0\u2872\0\u28b0\0\u28ee\0\272\0\u292c\0\u083c\0\u296a\0\u29a8"+
    "\0\u29e6\0\272\0\272\0\u2a24\0\u2a62\0\u2aa0\0\u2ade\0\u2b1c"+
    "\0\u083c\0\272\0\u2b5a\0\u2b98\0\u083c\0\u2bd6\0\272\0\u2c14"+
    "\0\u083c\0\u2c52\0\u2c90\0\u083c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\2\2\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\2\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\4\1\34\1\4\1\35"+
    "\1\36\1\37\1\40\1\41\2\4\1\42\3\4\1\43"+
    "\1\44\1\45\1\46\5\4\1\47\1\50\1\51\1\52"+
    "\1\53\1\2\1\54\1\55\1\56\77\0\2\3\76\0"+
    "\3\4\4\0\1\4\20\0\32\4\11\0\6\57\1\0"+
    "\1\60\66\57\3\0\2\61\5\0\1\61\20\0\2\61"+
    "\1\62\1\63\2\61\1\64\1\61\1\65\12\61\1\66"+
    "\3\61\1\67\1\70\1\61\14\0\2\71\5\0\1\71"+
    "\20\0\32\71\22\0\1\72\75\0\1\73\1\11\63\0"+
    "\13\74\1\75\1\76\61\74\14\77\1\100\1\75\60\77"+
    "\21\0\1\101\2\0\1\102\45\0\1\103\1\104\1\105"+
    "\24\0\1\106\75\0\1\107\1\110\74\0\1\111\55\0"+
    "\3\4\4\0\1\4\20\0\1\4\1\112\30\4\14\0"+
    "\3\4\4\0\1\4\20\0\5\4\1\113\4\4\1\114"+
    "\17\4\14\0\3\4\4\0\1\4\20\0\3\4\1\115"+
    "\10\4\1\116\15\4\14\0\3\4\4\0\1\4\20\0"+
    "\2\4\1\117\27\4\14\0\3\4\4\0\1\4\20\0"+
    "\17\4\1\120\12\4\14\0\3\4\4\0\1\4\20\0"+
    "\1\4\1\121\14\4\1\122\13\4\14\0\3\4\4\0"+
    "\1\4\20\0\20\4\1\123\11\4\14\0\3\4\4\0"+
    "\1\4\20\0\3\4\1\124\6\4\1\125\17\4\14\0"+
    "\3\4\4\0\1\4\20\0\1\4\1\126\1\127\27\4"+
    "\14\0\3\4\4\0\1\4\20\0\1\130\31\4\14\0"+
    "\3\4\4\0\1\4\20\0\7\4\1\131\12\4\1\132"+
    "\7\4\14\0\3\4\4\0\1\4\20\0\2\4\1\133"+
    "\27\4\14\0\3\4\4\0\1\4\20\0\3\4\1\134"+
    "\26\4\14\0\3\4\4\0\1\4\20\0\5\4\1\135"+
    "\24\4\102\0\1\136\27\0\1\137\75\0\1\140\52\0"+
    "\6\57\1\141\1\0\66\57\7\0\1\142\71\0\2\61"+
    "\5\0\1\61\20\0\32\61\14\0\2\61\5\0\1\61"+
    "\20\0\12\61\1\143\17\61\14\0\2\61\5\0\1\61"+
    "\20\0\20\61\1\144\11\61\14\0\2\61\5\0\1\61"+
    "\20\0\25\61\1\145\4\61\14\0\2\61\5\0\1\61"+
    "\20\0\21\61\1\146\10\61\14\0\2\61\5\0\1\61"+
    "\20\0\3\61\1\147\26\61\14\0\2\61\5\0\1\61"+
    "\20\0\21\61\1\150\10\61\14\0\2\61\5\0\1\61"+
    "\20\0\2\61\1\151\27\61\14\0\2\71\4\0\1\152"+
    "\1\71\20\0\32\71\23\0\1\73\63\0\1\74\1\0"+
    "\74\74\1\77\1\0\74\77\24\0\1\153\54\0\3\4"+
    "\4\0\1\4\20\0\2\4\1\154\3\4\1\155\23\4"+
    "\14\0\3\4\4\0\1\4\20\0\6\4\1\156\23\4"+
    "\14\0\3\4\4\0\1\4\20\0\10\4\1\157\21\4"+
    "\14\0\3\4\4\0\1\4\20\0\7\4\1\160\22\4"+
    "\14\0\3\4\4\0\1\4\20\0\6\4\1\161\3\4"+
    "\1\162\17\4\14\0\3\4\4\0\1\4\20\0\23\4"+
    "\1\163\6\4\14\0\3\4\4\0\1\4\20\0\1\164"+
    "\1\165\30\4\14\0\3\4\4\0\1\4\20\0\20\4"+
    "\1\166\11\4\14\0\3\4\4\0\1\4\20\0\12\4"+
    "\1\167\17\4\14\0\3\4\4\0\1\4\20\0\21\4"+
    "\1\170\10\4\14\0\3\4\4\0\1\4\20\0\6\4"+
    "\1\171\23\4\14\0\3\4\4\0\1\4\20\0\3\4"+
    "\1\172\26\4\14\0\3\4\4\0\1\4\20\0\7\4"+
    "\1\173\22\4\14\0\3\4\4\0\1\4\20\0\23\4"+
    "\1\174\6\4\14\0\3\4\4\0\1\4\20\0\3\4"+
    "\1\175\26\4\14\0\3\4\4\0\1\4\20\0\10\4"+
    "\1\176\21\4\14\0\3\4\4\0\1\4\20\0\23\4"+
    "\1\177\6\4\14\0\3\4\4\0\1\4\20\0\7\4"+
    "\1\200\22\4\14\0\3\4\4\0\1\4\20\0\2\4"+
    "\1\201\27\4\11\0\6\202\2\0\66\202\3\0\2\61"+
    "\5\0\1\61\20\0\14\61\1\203\15\61\14\0\2\61"+
    "\5\0\1\61\20\0\7\61\1\204\22\61\14\0\2\61"+
    "\5\0\1\61\20\0\15\61\1\205\14\61\14\0\2\61"+
    "\5\0\1\61\20\0\11\61\1\206\20\61\14\0\2\61"+
    "\5\0\1\61\20\0\7\61\1\207\22\61\14\0\2\61"+
    "\5\0\1\61\20\0\7\61\1\210\22\61\14\0\2\61"+
    "\5\0\1\61\20\0\2\61\1\211\27\61\14\0\3\4"+
    "\4\0\1\4\20\0\3\4\1\212\26\4\14\0\3\4"+
    "\4\0\1\4\20\0\16\4\1\213\13\4\14\0\3\4"+
    "\4\0\1\4\20\0\1\4\1\214\30\4\14\0\3\4"+
    "\4\0\1\4\20\0\1\4\1\215\30\4\14\0\3\4"+
    "\4\0\1\4\20\0\10\4\1\216\21\4\14\0\3\4"+
    "\4\0\1\4\20\0\2\4\1\217\27\4\14\0\3\4"+
    "\4\0\1\4\20\0\12\4\1\220\17\4\14\0\3\4"+
    "\4\0\1\4\20\0\15\4\1\221\14\4\14\0\3\4"+
    "\4\0\1\4\20\0\3\4\1\222\26\4\14\0\3\4"+
    "\4\0\1\4\20\0\7\4\1\223\22\4\14\0\3\4"+
    "\4\0\1\4\20\0\12\4\1\224\17\4\14\0\3\4"+
    "\4\0\1\4\20\0\6\4\1\225\23\4\14\0\3\4"+
    "\4\0\1\4\20\0\3\4\1\226\26\4\14\0\3\4"+
    "\4\0\1\4\20\0\13\4\1\227\16\4\14\0\3\4"+
    "\4\0\1\4\20\0\11\4\1\230\20\4\14\0\3\4"+
    "\4\0\1\4\20\0\15\4\1\231\14\4\14\0\3\4"+
    "\4\0\1\4\20\0\2\4\1\232\27\4\14\0\3\4"+
    "\4\0\1\4\20\0\6\4\1\233\23\4\14\0\3\4"+
    "\4\0\1\4\20\0\15\4\1\234\14\4\14\0\3\4"+
    "\4\0\1\4\20\0\21\4\1\235\10\4\14\0\3\4"+
    "\4\0\1\4\20\0\1\4\1\236\30\4\11\0\6\202"+
    "\1\237\1\0\66\202\3\0\2\61\5\0\1\61\20\0"+
    "\10\61\1\240\21\61\14\0\2\61\5\0\1\61\20\0"+
    "\1\61\1\241\30\61\14\0\2\61\5\0\1\61\20\0"+
    "\1\61\1\242\30\61\14\0\2\61\5\0\1\61\20\0"+
    "\7\61\1\243\22\61\14\0\2\61\5\0\1\61\20\0"+
    "\21\61\1\244\10\61\14\0\2\61\5\0\1\61\20\0"+
    "\4\61\1\245\25\61\14\0\2\61\5\0\1\61\20\0"+
    "\1\61\1\246\30\61\14\0\3\4\4\0\1\4\20\0"+
    "\1\247\31\4\14\0\3\4\4\0\1\4\20\0\1\250"+
    "\31\4\14\0\3\4\4\0\1\4\20\0\7\4\1\251"+
    "\22\4\14\0\3\4\4\0\1\4\20\0\6\4\1\252"+
    "\23\4\14\0\3\4\4\0\1\4\20\0\17\4\1\253"+
    "\12\4\14\0\3\4\4\0\1\4\20\0\11\4\1\254"+
    "\1\255\17\4\14\0\3\4\4\0\1\4\20\0\20\4"+
    "\1\256\11\4\14\0\3\4\4\0\1\4\20\0\2\4"+
    "\1\257\27\4\14\0\3\4\4\0\1\4\20\0\14\4"+
    "\1\260\15\4\14\0\3\4\4\0\1\4\20\0\6\4"+
    "\1\261\23\4\14\0\3\4\4\0\1\4\20\0\1\4"+
    "\1\262\30\4\14\0\3\4\4\0\1\4\20\0\14\4"+
    "\1\263\15\4\14\0\3\4\4\0\1\4\20\0\11\4"+
    "\1\264\1\265\17\4\14\0\3\4\4\0\1\4\20\0"+
    "\6\4\1\266\23\4\14\0\3\4\4\0\1\4\20\0"+
    "\15\4\1\267\14\4\14\0\2\61\5\0\1\61\20\0"+
    "\10\61\1\270\21\61\14\0\2\61\5\0\1\61\20\0"+
    "\1\271\31\61\14\0\2\61\5\0\1\61\20\0\14\61"+
    "\1\272\15\61\14\0\2\61\5\0\1\61\20\0\6\61"+
    "\1\273\23\61\14\0\2\61\5\0\1\61\20\0\10\61"+
    "\1\274\21\61\14\0\3\4\4\0\1\4\20\0\4\4"+
    "\1\275\25\4\14\0\3\4\4\0\1\4\20\0\7\4"+
    "\1\276\22\4\14\0\3\4\4\0\1\4\20\0\4\4"+
    "\1\277\25\4\14\0\3\4\4\0\1\4\20\0\2\4"+
    "\1\300\27\4\14\0\3\4\4\0\1\4\20\0\17\4"+
    "\1\301\12\4\14\0\3\4\4\0\1\4\20\0\12\4"+
    "\1\302\17\4\14\0\3\4\4\0\1\4\20\0\17\4"+
    "\1\303\12\4\14\0\3\4\4\0\1\4\20\0\4\4"+
    "\1\304\25\4\14\0\3\4\4\0\1\4\20\0\7\4"+
    "\1\305\22\4\14\0\3\4\4\0\1\4\20\0\3\4"+
    "\1\306\26\4\14\0\3\4\4\0\1\4\20\0\6\4"+
    "\1\307\23\4\14\0\2\61\5\0\1\61\20\0\26\61"+
    "\1\310\3\61\14\0\2\61\5\0\1\61\20\0\6\61"+
    "\1\311\23\61\14\0\2\61\5\0\1\61\20\0\3\61"+
    "\1\312\26\61\14\0\2\61\5\0\1\61\20\0\10\61"+
    "\1\313\21\61\14\0\3\4\4\0\1\4\20\0\10\4"+
    "\1\314\21\4\14\0\3\4\4\0\1\4\20\0\12\4"+
    "\1\315\17\4\14\0\3\4\4\0\1\4\20\0\16\4"+
    "\1\316\13\4\14\0\3\4\4\0\1\4\20\0\2\4"+
    "\1\317\27\4\14\0\3\4\4\0\1\4\20\0\1\320"+
    "\31\4\14\0\3\4\4\0\1\4\20\0\21\4\1\321"+
    "\10\4\14\0\2\61\5\0\1\61\20\0\1\61\1\322"+
    "\30\61\14\0\2\61\5\0\1\61\20\0\16\61\1\323"+
    "\13\61\14\0\2\61\5\0\1\61\20\0\1\324\31\61"+
    "\14\0\2\61\5\0\1\61\20\0\31\61\1\325\14\0"+
    "\3\4\4\0\1\4\20\0\14\4\1\326\15\4\14\0"+
    "\3\4\4\0\1\4\20\0\1\327\31\4\14\0\3\4"+
    "\4\0\1\4\20\0\1\4\1\330\30\4\14\0\3\4"+
    "\4\0\1\4\20\0\1\4\1\331\30\4\14\0\3\4"+
    "\4\0\1\4\20\0\3\4\1\332\26\4\14\0\2\61"+
    "\5\0\1\61\20\0\10\61\1\333\21\61\14\0\2\61"+
    "\5\0\1\61\20\0\1\334\31\61\14\0\2\61\5\0"+
    "\1\61\20\0\1\61\1\335\30\61\14\0\2\61\5\0"+
    "\1\61\20\0\12\61\1\336\17\61\14\0\3\4\4\0"+
    "\1\4\20\0\10\4\1\337\21\4\14\0\3\4\4\0"+
    "\1\4\20\0\1\4\1\340\30\4\14\0\3\4\4\0"+
    "\1\4\20\0\3\4\1\341\26\4\14\0\3\4\4\0"+
    "\1\4\20\0\5\4\1\342\1\4\1\343\22\4\14\0"+
    "\3\4\4\0\1\4\20\0\7\4\1\344\22\4\14\0"+
    "\2\61\5\0\1\61\20\0\2\61\1\345\27\61\14\0"+
    "\2\61\5\0\1\61\20\0\1\61\1\346\30\61\14\0"+
    "\2\61\5\0\1\61\20\0\5\61\1\347\1\61\1\350"+
    "\22\61\14\0\2\61\5\0\1\61\20\0\14\61\1\351"+
    "\15\61\14\0\3\4\4\0\1\4\20\0\10\4\1\352"+
    "\21\4\14\0\3\4\4\0\1\4\20\0\22\4\1\353"+
    "\7\4\14\0\3\4\4\0\1\4\20\0\21\4\1\354"+
    "\10\4\14\0\3\4\4\0\1\4\20\0\6\4\1\355"+
    "\23\4\14\0\2\61\5\0\1\61\20\0\1\356\31\61"+
    "\14\0\2\61\5\0\1\61\20\0\21\61\1\357\10\61"+
    "\14\0\2\61\5\0\1\61\20\0\6\61\1\360\23\61"+
    "\14\0\2\61\5\0\1\61\20\0\11\61\1\361\20\61"+
    "\14\0\3\4\4\0\1\4\20\0\6\4\1\362\23\4"+
    "\14\0\3\4\4\0\1\4\20\0\1\4\1\363\30\4"+
    "\14\0\2\61\5\0\1\61\20\0\21\61\1\364\10\61"+
    "\14\0\2\61\5\0\1\61\20\0\6\61\1\365\23\61"+
    "\14\0\2\61\5\0\1\61\20\0\1\61\1\366\30\61"+
    "\14\0\3\4\4\0\1\4\20\0\1\367\31\4\14\0"+
    "\2\61\5\0\1\61\20\0\15\61\1\370\14\61\14\0"+
    "\2\61\5\0\1\61\20\0\1\371\31\61\14\0\2\61"+
    "\5\0\1\61\20\0\6\61\1\372\23\61\14\0\2\61"+
    "\5\0\1\61\20\0\3\61\1\373\26\61\14\0\2\61"+
    "\5\0\1\61\20\0\1\374\31\61\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11470];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\11\1\2\11\1\1\1\11\3\1\6\11"+
    "\16\1\4\11\1\1\1\11\2\1\2\0\10\1\1\0"+
    "\1\11\1\1\1\0\1\11\3\0\1\11\1\1\7\11"+
    "\24\1\4\11\1\0\7\1\2\11\26\1\1\0\34\1"+
    "\1\11\135\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _JawaLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _JawaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 77: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 78: break;
          case 3: 
            { return ID;
            }
          case 79: break;
          case 4: 
            { return AT;
            }
          case 80: break;
          case 5: 
            { return LOCATION_ID;
            }
          case 81: break;
          case 6: 
            { return DOT;
            }
          case 82: break;
          case 7: 
            { return NUMBER;
            }
          case 83: break;
          case 8: 
            { return SEMI;
            }
          case 84: break;
          case 9: 
            { return COMMA;
            }
          case 85: break;
          case 10: 
            { return HAT;
            }
          case 86: break;
          case 11: 
            { return BAR;
            }
          case 87: break;
          case 12: 
            { return GT;
            }
          case 88: break;
          case 13: 
            { return LBRACE;
            }
          case 89: break;
          case 14: 
            { return RBRACE;
            }
          case 90: break;
          case 15: 
            { return LBRACKET;
            }
          case 91: break;
          case 16: 
            { return RBRACKET;
            }
          case 92: break;
          case 17: 
            { return LPAREN;
            }
          case 93: break;
          case 18: 
            { return RPAREN;
            }
          case 94: break;
          case 19: 
            { return ADD;
            }
          case 95: break;
          case 20: 
            { return SUB;
            }
          case 96: break;
          case 21: 
            { return MUL;
            }
          case 97: break;
          case 22: 
            { return DIV;
            }
          case 98: break;
          case 23: 
            { return NOT;
            }
          case 99: break;
          case 24: 
            { return LT;
            }
          case 100: break;
          case 25: 
            { return ANNOTATION_KEY;
            }
          case 101: break;
          case 26: 
            { return RANGE;
            }
          case 102: break;
          case 27: 
            { return STRING_LITERAL;
            }
          case 103: break;
          case 28: 
            { return OR;
            }
          case 104: break;
          case 29: 
            { return SHR;
            }
          case 105: break;
          case 30: 
            { return AND;
            }
          case 106: break;
          case 31: 
            { return XOR;
            }
          case 107: break;
          case 32: 
            { return SHL;
            }
          case 108: break;
          case 33: 
            { return ASSIGN_OP;
            }
          case 109: break;
          case 34: 
            { return EQ;
            }
          case 110: break;
          case 35: 
            { return ARROW;
            }
          case 111: break;
          case 36: 
            { return GE;
            }
          case 112: break;
          case 37: 
            { return IF;
            }
          case 113: break;
          case 38: 
            { return REM;
            }
          case 114: break;
          case 39: 
            { return LE;
            }
          case 115: break;
          case 40: 
            { return NQ;
            }
          case 116: break;
          case 41: 
            { return APOSTROPHE_ID;
            }
          case 117: break;
          case 42: 
            { return USHR;
            }
          case 118: break;
          case 43: 
            { return NEW;
            }
          case 119: break;
          case 44: 
            { return ELSE;
            }
          case 120: break;
          case 45: 
            { return CALL;
            }
          case 121: break;
          case 46: 
            { return THEN;
            }
          case 122: break;
          case 47: 
            { return NULL_LITERAL;
            }
          case 123: break;
          case 48: 
            { return GOTO;
            }
          case 124: break;
          case 49: 
            { return LCMP;
            }
          case 125: break;
          case 50: 
            { return STATIC_ID;
            }
          case 126: break;
          case 51: 
            { return TYPE_KEY;
            }
          case 127: break;
          case 52: 
            { return KIND_KEY;
            }
          case 128: break;
          case 53: 
            { return CATCH;
            }
          case 129: break;
          case 54: 
            { return DCMPG;
            }
          case 130: break;
          case 55: 
            { return DCMPL;
            }
          case 131: break;
          case 56: 
            { return THROW;
            }
          case 132: break;
          case 57: 
            { return FCMPG;
            }
          case 133: break;
          case 58: 
            { return FCMPL;
            }
          case 134: break;
          case 59: 
            { return OWNER_KEY;
            }
          case 135: break;
          case 60: 
            { return CLASS_OR_INTERFACE;
            }
          case 136: break;
          case 61: 
            { return RETURN;
            }
          case 137: break;
          case 62: 
            { return SWITCH;
            }
          case 138: break;
          case 63: 
            { return STATIC_FIELD;
            }
          case 139: break;
          case 64: 
            { return LENGTH;
            }
          case 140: break;
          case 65: 
            { return EXTENDS_AND_IMPLEMENTS;
            }
          case 141: break;
          case 66: 
            { return METHOD;
            }
          case 142: break;
          case 67: 
            { return EXCEPTION;
            }
          case 143: break;
          case 68: 
            { return SIGNATURE_KEY;
            }
          case 144: break;
          case 69: 
            { return CONST_CLASS;
            }
          case 145: break;
          case 70: 
            { return INSTANCEOF;
            }
          case 146: break;
          case 71: 
            { return ACCESS_FLAG_KEY;
            }
          case 147: break;
          case 72: 
            { return MONITOR_EXIT;
            }
          case 148: break;
          case 73: 
            { return MONITOR_EXIT_KEY;
            }
          case 149: break;
          case 74: 
            { return MONITOR_ENTER;
            }
          case 150: break;
          case 75: 
            { return MONITOR_ENTER_KEY;
            }
          case 151: break;
          case 76: 
            { return CLASS_DESCRIPTOR_KEY;
            }
          case 152: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
